//template <class T> class BPlusTree {
//private:
//    static const int MINIMUM = 1;
//    static const int MAXIMUM = 2 * MINIMUM;
//
//    bool dups_ok;                               //true if duplicate keys may be
//    //      inserted
//    int data_count;                             //number of data elements
//    T data[MAXIMUM + 1];                        //holds the keys
//    int child_count;                            //number of children (pointers to children nodes)
//    BPlusTree<T>* subset[MAXIMUM + 2] = { nullptr };                 //subtrees
//
//    bool is_leaf() const { return child_count == 0; } //true if this is a leaf node
//
//    /*
//    int i = first_ge(data, data_count, entry);
//    bool found = (i<data_count && data[i] == entry);
//
//    three cases:
//      a. found: deal with duplicates
//      ! found:
//      b. leaf : insert entry in data at position i
//      c. !leaf: subset[i]->loose_insert(entry)
//                fix_excess(i) if there is a need
//             |   found     |   !found        |
//       ------|-------------|-----------------|-------
//       leaf  |  a. Deal    | b: insert entry |
//             |     with    |    at data[i]   |
//       ------|  duplicates |-----------------|-------
//             |             | d: subset[i]->  |
//       !leaf |             |    loose_insert |
//             |             |    fix_excess(i)|
//       ------|-------------|-----------------|-------
//     */
//    void loose_insert(const T& entry) {
//        const bool debug = false;
//
//        int i = first_ge(data, data_count, entry);
//        bool found = (i < data_count && data[i] == entry);
//
//        if (found) {
//            if (debug) cout << "loose_insert() : Entry" << entry << " found" << endl;
//            data[i] = entry;
//            return;
//        }
//
//        if (debug) cout << "loose_insert() : Entry " << entry << " not found" << endl;
//
//        if (is_leaf()) {
//            if (debug) cout << "loose_insert() : BPlusTree is leaf" << endl;
//            insert_item(data, i, data_count, entry);
//        }
//        else {
//            if (debug) cout << "loose_insert() : BPlusTree is not leaf" << endl;
//            subset[i]->loose_insert(entry);
//            fix_excess(i);
//        }
//    }
//
//    //this node's child i has one too many items: 3 steps:
//    //1. add a new subset at location i+1 of this node
//    //2. split subset[i] (both the subset array and the data array) and move half into
//    // subset[i+1] (this is the subset we created in step 1.)
//    //3. detach the last data item of subset[i] and bring it and insert it into this node's data[]
//    // //Note that this last step may cause this node to have too many items. This is OK. This will be
//    // dealt with at the higher recursive level. (my parent will fix it!)
//    void fix_excess(int i) {
//        const bool debug = false;
//
//        if (subset[i]->data_count > MAXIMUM) {
//            insert_item(subset, i + 1, child_count, new BPlusTree<T>());
//            if (debug) cout << "fix_excess() : child_count = " << child_count << endl;
//            split(subset[i]->data, subset[i]->data_count, subset[i + 1]->data, subset[i + 1]->data_count);
//            if (debug) cout << "fix_excess() : subset[i] after split..." << endl << *subset[i] << endl << "subset[i + 1] after split..." << endl << *subset[i + 1] << endl;
//
//            split(subset[i]->subset, subset[i]->child_count, subset[i + 1]->subset, subset[i + 1]->child_count);
//
//            T detached;
//            detach_item(subset[i]->data, subset[i]->data_count, detached);
//            if (debug) cout << "fix_excess() : detached = " << detached << endl;
//            insert_item(data, i, data_count, detached);
//        }
//    }
//
//    //remove element functions:
//
//    /* four cases:
//        a. leaf && not found target: there is nothing to do
//        b. leaf && found target: just remove the target
//        c. not leaf and not found target: recursive call to loose_remove
//        d. not leaf and found: replace target with largest child of subset[i]
//
//            |   !found    |   found       |
//        ------|-------------|---------------|-------
//        leaf  |  a: nothing | b: delete     |
//            |     to do   |    target     |
//        ------|-------------|---------------|-------
//        !leaf | c: loose_   | d: replace    |
//            |    remove   |    w/ biggest |
//        ------|-------------|---------------|-------
//    */
//    void loose_remove(const T& entry) { // NOTE: Needs testing
//        const bool debug = false;
//
//        int i = first_ge(data, data_count, entry);
//        bool found = (i < data_count && data[i] == entry);
//
//        T temp;
//        if (found) {
//            if (is_leaf()) {
//                delete_item(data, i, data_count, temp);
//                return;
//            }
//            subset[i]->remove_biggest(temp);
//            if (debug) cout << "loose_remove() : biggest item removed = " << temp << endl;
//            data[i] = temp;
//
//            fix_shortage(i);
//            return;
//        }
//
//        if (!is_leaf()) {
//            subset[i]->loose_remove(entry);
//            fix_shortage(i);
//        }
//    }
//
//    /*
//     * fix shortage in subtree i:
//     * if child i+1 has more than MINIMUM, rotate left
//     * elif child i-1 has more than MINIMUM, rotate right
//     * elif there is a right child, merge child i with next child
//     * else merge child i with left child
//     */
//    void fix_shortage(int i) {
//        assert(i >= 0);
//
//        if (is_leaf() || subset[i]->data_count >= MINIMUM) return;
//
//        if (i + 1 < child_count && subset[i + 1]->data_count > MINIMUM) {
//            rotate_left(i + 1);
//        }
//        else if (i - 1 >= 0 && subset[i - 1]->data_count > MINIMUM) {
//            rotate_right(i - 1);
//        }
//        else if (i + 1 < child_count) {
//            merge_with_next_subset(i);
//        }
//        else {
//            if (i - 1 >= 0) merge_with_next_subset(i - 1);
//        }
//
//    }
//
//    // Keep looking in the last subtree (recursive)
//    //  until you get to a leaf.
//    // Then, detach the last (biggest) data item
//    //
//    // after the recursive call, fix shortage.
//    void remove_biggest(T& entry) {
//        if (is_leaf()) {
//            detach_item(data, data_count, entry);
//            return;
//        }
//
//        subset[child_count - 1]->remove_biggest(entry);
//        fix_shortage(child_count - 1);
//    }
//
//    /*
//     * (0 < i < child_count) and (subset[i]->data_count > MINIMUM)
//     * subset[i-1] has only MINIMUM - 1 entries.
//     *
//     * item transfers from child[i] to child [i-1]
//     *
//     * FIRST item of subset[i]->data moves up to data to replace data[i-1],
//     * data[i-1] moves down to the RIGHT of subset[i-1]->data
//     *
//     *  i = 1:
//     *           [50     100]
//     *  [  ]        [65 75]       ....
//     *            [a]  [b]  [c]
//     *
//     *  65 move up to replace 50 (data[i])
//     *  65's child (its child 0) moves over to be the child of 50
//     *  50 moves down to the right of subset[i]->data
//     *
//     *            [65      100]
//     *  [50]         [ 75 ]       ....
//     *     [a]      [b]  [c]
//     *
//     *
//     *
//     *
//     */
//     // If necessary, shift first subset of subset[i] to end of subset[i-1]
//    void rotate_left(int i) {
//
//        if ((0 < i && i < child_count) &&
//            (subset[i]->data_count > MINIMUM && subset[i - 1]->data_count == MINIMUM - 1)) {
//
//            attach_item(subset[i - 1]->data, subset[i - 1]->data_count, data[i - 1]);
//
//            T to_rotate;
//            delete_item(subset[i]->data, 0, subset[i]->data_count, to_rotate);
//            data[i - 1] = to_rotate;
//
//            if (!subset[i]->is_leaf()) {
//                BPlusTree<T>* to_attach = nullptr;
//                delete_item(subset[i]->subset, 0, subset[i]->child_count, to_attach);
//                attach_item(subset[i - 1]->subset, subset[i - 1]->child_count, to_attach);
//            }
//        }
//
//    }
//
//    /* (i < child_count - 1) and (subset[i]->data_count > MINIMUM)
//     * subset[i+ 1] has only MINIMUM - 1 entries.
//     *
//     * item transfers from child[i] to child [i+1]
//     *
//     * LAST item of subset[i]->data moves up to data to replace data[i],
//     * data[i] moves down to the LEFT of subset[i+1]->data
//     *
//     * i = 1
//     *                     [50 100]
//     *      [20 30]        [65 75]          [ ]
//     *  [..] [..] [..]   [a] [b] [c]        [..]
//     *
//     *  75 moves up to replace 100 (data[i])
//     *  75's child (its last child) moves over to be the (child 0) child of 100
//     *  100 moves down to subset[i]->data
//     *
//     *                     [50 75]
//     *      [20 30]          [65]          [100]
//     *  [..] [..] [..]     [a] [b]        [c] [..]
//     *
//     *
//     *
//     *
//     *
//     */
//     // If necessary, shift last subset of subset[i] to front of subset[i+1]
//    void rotate_right(int i) {
//        if ((i < child_count - 1) &&
//            (subset[i]->data_count > MINIMUM && subset[i + 1]->data_count == MINIMUM - 1)) {
//
//            const bool debug = false;
//            insert_item(subset[i + 1]->data, 0, subset[i + 1]->data_count, data[i]);
//
//            T to_rotate;
//            detach_item(subset[i]->data, subset[i]->data_count, to_rotate);
//            data[i] = to_rotate;
//
//            if (debug) cout << "subset[i]->data_count = " << subset[i]->data_count << endl;
//            if (debug) cout << "subset[i]->child_count = " << subset[i]->child_count << endl;
//
//
//            if (!subset[i]->is_leaf()) {
//                BPlusTree<T>* to_attach = nullptr;
//                detach_item(subset[i]->subset, subset[i]->child_count, to_attach);
//                if (debug) cout << "subset[i]->child_count = " << subset[i]->child_count << endl;
//                insert_item(subset[i + 1]->subset, 0, subset[i + 1]->child_count, to_attach);
//            }
//        }
//
//    }
//
//    /*
//     *  Merge subset[i] with subset [i+1] with data[i] in the middle
//     *
//     *   1. remove data[i] from this object
//     *   2. append it to child[i]->data
//     *   3. Move all data items from subset[i+1]->data to subset[i]->data
//     *   4. Move all subset pointers from subset[i+1]->subset to subset[i]->subset
//     *   5. delete subset[i+1] (store in a temp ptr)
//     *   6. delete temp ptr
//     */
//    void merge_with_next_subset(int i) {
//        const bool debug = false;
//        assert(i < MAXIMUM + 1); // i + 1 < 5
//
//        T parent_item;
//        delete_item(data, i, data_count, parent_item);
//        attach_item(subset[i]->data, subset[i]->data_count, parent_item);
//
//        BPlusTree<T>* to_merge = subset[i + 1];
//        merge(subset[i]->data, subset[i]->data_count, to_merge->data, to_merge->data_count);
//        merge(subset[i]->subset, subset[i]->child_count, to_merge->subset, to_merge->child_count);
//
//        delete_item(subset, i + 1, child_count, to_merge);
//        delete to_merge;
//        to_merge = nullptr;
//
//        cout << "merge_with_next_subset() : " << "child_count = " << child_count << endl;
//        //cout << *this << endl;
//        //cout << "=====================" << endl;
//    }
//
//    T& get_existing(const T& entry) {
//        assert(contains(entry));
//        return *find(entry);
//    }
//
//public:
//    BPlusTree(bool dups = false) : BPlusTree(nullptr, 0, dups) {}
//
//    BPlusTree(T* a, int size, bool dups = false) : data_count(0), child_count(0), dups_ok(dups) {
//        assert(size >= 0);
//        //SetConsoleOutputCP(65001);
//        if (a != nullptr)
//            for (int i = 0; i < size; i++) {
//                insert(a[i]);
//                assert(is_valid());
//            }
//    }
//
//    //big three:
//    BPlusTree(const BPlusTree<T>& other) : data_count(other.data_count), child_count(other.child_count), dups_ok(other.dups_ok) {
//        copy_tree(other);
//    }
//
//    ~BPlusTree() {
//        clear_tree();
//    }
//
//    BPlusTree<T>& operator =(const BPlusTree<T>& RHS) {
//        clear_tree();
//        copy_tree(RHS);
//        return *this;
//    }
//
//    void make_tree() {
//        data[0] = 100;
//        data[1] = 200;
//        data_count = 2;
//        subset[0] = new BPlusTree<T>(false);
//        subset[1] = new BPlusTree<T>(false);
//        subset[2] = new BPlusTree<T>(false);
//        child_count = 3;
//        BPlusTree<T>* p = subset[0];
//        p->data[0] = 50;
//        p->data_count = 1;
//
//        p = subset[1];
//        p->data[0] = 125;
//        p->data[1] = 150;
//        p->data_count = 2;
//
//        p = subset[2];
//        p->data[0] = 250;
//        p->data_count = 1;
//
//        print_tree(0, cout);
//    }
//
//    //------------------------------------------------
//    //          I N S E R T
//    //------------------------------------------------
//    //in order for this class to be able to keep track of the number of the keys, this function (and the functions
//    //  it calls ) must return a success code.
//    //If we are to keep track of the number the keys (as opposed to key/values) then the success 
//    //  code must distinguish between inserting a new key, or adding a new key to the existing key. 
//    //  (for "dupes_ok")
//    //
//    //loose_insert this entry into this root.
//    //loose_insert(entry) will insert entry into this tree. Once it returns, all the subtrees are valid
//    //  btree subtrees EXCEPT this root may have one extra data item:
//    //    in this case (we have excess in the root)
//    //      create a new node, copy all the contents of this root into it,
//    //      clear this root node,
//    //      make the new node this root's only child (subset[0])
//    //
//    //Then, call fix_excess on this only subset (subset[0])
//    void insert(const T& entry) {
//        const bool debug = false;
//
//        loose_insert(entry);
//        if (data_count > MAXIMUM) {
//            BPlusTree<T>* copy = new BPlusTree<T>(); // shallow copy
//            copy_array(copy->data, data, copy->data_count, data_count);
//            copy_array(copy->subset, subset, copy->child_count, child_count);
//
//            data_count = 0;
//            for (int i = 0; i < child_count; i++)
//                subset[i] = nullptr;
//            child_count = 0;
//            subset[child_count++] = copy;
//
//            if (debug) cout << "insert() : tree after copy..." << endl << *this << endl << "========" << endl << "child_count = " << child_count << endl;
//
//            fix_excess(0);
//        }
//    }
//
//    //Loose_remove the entry from this tree.
//    //once you return from loose_remove, the root (this object) may have no data and only a single subset
//    //now, the tree must shrink:
//    //  point a temporary pointer (shrink_ptr) and point it to this root's only subset
//    //  copy all the data and subsets of this subset into the root (through shrink_ptr)
//    //  now, the root contains all the data and poiners of it's old child.
//    //  now, simply delete shrink_ptr (blank out child), and the tree has shrunk by one level.
//    //  Note, the root node of the tree will always be the same, it's the child node we delete
//    void remove(const T& entry) {
//        const bool debug = false;
//        loose_remove(entry);
//        if (debug) cout << "remove() : child_count after remove = " << child_count << endl;
//        if (empty() && child_count == 1) {
//
//            if (debug) cout << "remove() : Root has no data and one subset! " << endl;
//            BPlusTree<T>* shrink_ptr = subset[0];
//
//            merge(data, data_count, shrink_ptr->data, shrink_ptr->data_count);
//            merge(subset, child_count, shrink_ptr->subset, shrink_ptr->child_count);
//
//            delete_item(subset, 0, child_count, shrink_ptr);
//
//            if (debug) cout << "remove() : child_count after shrink = " << child_count << endl;
//            delete shrink_ptr;
//            shrink_ptr = nullptr;
//        }
//    }
//
//    //clear this object
//    //  (delete all nodes etc.)
//    void clear_tree() {
//        if (is_leaf()) {
//            data_count = 0;
//            return;
//        }
//
//        for (int i = 0; i < child_count; i++) {
//            subset[i]->clear_tree();
//            delete subset[i];
//            subset[i] = nullptr;
//        }
//        child_count = 0;
//        data_count = 0;
//    }
//
//    //copy other into this object
//    void copy_tree(const BPlusTree<T>& other) {
//        copy_array(data, other.data, data_count, other.data_count);
//
//        if (!other.is_leaf()) {
//            for (int i = 0; i < other.child_count; i++) {
//                subset[i] = new BPlusTree<T>();
//                subset[i]->copy_tree(*other.subset[i]);
//            }
//        }
//        child_count = other.child_count;
//    }
//
//    //---------------------------------------------------------------------
//    //            C O N T A I N S / F I N D / G E T / E T C .
//    //---------------------------------------------------------------------
//    bool contains(const T& entry) {
//        int i = first_ge(data, data_count, entry);
//
//        if (i < data_count && data[i] == entry)
//            return true;
//        else if (is_leaf())
//            return false;
//        return subset[i]->contains(entry);
//    }
//
//    T* find(const T& entry) {
//        int i = first_ge(data, data_count, entry);
//
//        if (i < data_count && data[i] == entry)
//            return (data + i);
//        else if (is_leaf())
//            return nullptr;
//
//        return subset[i]->find(entry);
//    }
//
//    T& get(const T& entry) {
//        if (!contains(entry))
//            insert(entry);
//
//        return get_existing(entry);
//    }
//
//    //count the number of elements
//    int size() const {
//        return data_count;
//    }
//    //true if the tree is empty
//    bool empty() const {
//        return data_count == 0;
//    }
//
//    bool is_valid() {
//        for (int i = 1; i < data_count; i++)
//            if (data[i] < data[i - 1]) return false;
//
//        if (!is_leaf()) {
//            if (child_count != data_count + 1) return false;
//
//            for (int i = 0; i < child_count; i++)
//                if (!subset[i]->is_valid()) return false;
//        }
//
//        return true;
//    }
//
//    //print a readable version of
//    //                  the tree
//    //---------------------------------------------------------------
//    //      P R I N T  E T C.
//    //---------------------------------------------------------------
//    void print_tree(int level, ostream& outs) const {
//        const bool debug = false;
//        //1. print the last child (if any)
//        //2. print all the rest of the data and children
//        if (debug) outs << endl << "print_tree() ============" << endl;
//
//        if (is_leaf()) {
//            if (debug) outs << "print_tree() : Is leaf" << endl;
//            outs << setw(4 * level) << "" << "⎴" << endl;
//            for (int i = data_count - 1; i >= 0; i--)
//                outs << setw(4 * level) << "" << data[i] << endl;
//            outs << setw(4 * level) << "" << "⎵" << endl;
//        }
//        else {
//            if (debug) outs << "print_tree() : Is NOT leaf" << endl;
//            int data_index = data_count - 1;
//            for (int i = child_count - 1; i >= 0; i--) {
//                subset[i]->print_tree(level + 1, outs);
//                if (data_index == data_count - 1) outs << setw(4 * level) << "" << "⎴" << endl;
//                if (data_index >= 0) outs << setw(4 * level) << "" << data[data_index] << endl;
//                if (data_index == 0) outs << setw(4 * level) << "" << "⎵" << endl;
//                data_index--;
//            }
//        }
//    }
//
//    friend ostream& operator<<(ostream& outs, const BPlusTree<T>& print_me) {
//        print_me.print_tree(0, outs);
//        return outs;
//    }
//
//    // traverse the tree in an
//    // inorder fashion, return a 
//    // string of all the data items
//    // with vertical delimiters
//    string in_order() {
//        const bool debug = false;
//        string buffer = "";
//        if (is_leaf()) {
//            for (int i = 0; i < data_count; i++) {
//                buffer.append(to_string(data[i]) + "|");
//                if (debug) cout << data[i] << "|" << endl;
//            }
//            return buffer;
//        }
//
//        int i;
//        for (i = 0; i < data_count; i++) {
//            buffer.append(subset[i]->in_order());
//            buffer.append(to_string(data[i]) + "|");
//            if (debug) cout << data[i] << "|" << endl;
//        } buffer.append(subset[i]->in_order());
//        return buffer;
//    }
//
//};
